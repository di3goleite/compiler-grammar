"Start Symbol" = <Inicio>

! -------------------------------------------------
! CONJUNTO DE CARACTERES
! -------------------------------------------------
{Caracteres} = {Printable} - ["]

! -------------------------------------------------
! TERMINAIS
! -------------------------------------------------
IDENTIFICADOR = {Letter}({AlphaNumeric}|[_])*
NUMERO = '-'?{Number}+('.'{Number}+)?
CADEIA_CARACTERES = '"'({Caracteres})*'"'

! -------------------------------------------------
! PROGRAMA
! -------------------------------------------------
<Inicio> ::= 'programa' '{' <DefGlobal> '}'

<DefGlobal> ::= <DefConstante> <DefPrincipal> <DefGlobal2>
<DefGlobal2> ::= <DefMetodo> <DefGlobal2>
               |

! -------------------------------------------------
! REGRAS GERAIS
! -------------------------------------------------
<Tipo> ::= <TipoId>
         | 'vazio'
<TipoId>::= 'inteiro'
          | 'real'
          | 'texto'
          | 'boleano'

<Valor> ::= <ValorConst>
          | IDENTIFICADOR
<ValorConst> ::=  NUMERO
                 | CADEIA_CARACTERES

<ListaParam> ::= <TipoId> IDENTIFICADOR <ListaParam2>
               |
<ListaParam2> ::= ',' <TipoId> IDENTIFICADOR <ListaParam2>
                |

<ListaArg> ::= <Atribuicao> <ListaArg2>
<ListaArg2> ::= ',' <Atribuicao> <ListaArg2>
              |

! -------------------------------------------------
! CONSTANTES
! -------------------------------------------------
<DefConstante> ::= 'constantes' '{' <ListaConst> '}'                       
<ListaConst> ::= <Constante> ';' <ListaConst2>                   
<ListaConst2> ::= <ListaConst>
                |             
<Constante> ::= <TipoId> <AtribuicaoConst> <ListaAtribuicaoConst>             
<ListaAtribuicaoConst> ::= ',' <AtribuicaoConst> 
                    |
<AtribuicaoConst> ::= IDENTIFICADOR '=' <Valor>

! -------------------------------------------------
! PRINCIPAL
! -------------------------------------------------
<DefPrincipal> ::= 'metodo' 'principal' '('  <ListaParam> ')' ':' <Tipo> '{' <Declaracao> '}'

! -------------------------------------------------
! METODOS
! -------------------------------------------------
<DefMetodo> ::= 'metodo' IDENTIFICADOR '(' <ListaParam> ')' ':' <Tipo> '{' <Declaracao> '}'  

! -------------------------------------------------
! DECLARACOES
! -------------------------------------------------
<Declaracao> ::= <DefVariavel> <Declaracao>
               | <DefSe> <Declaracao>
               | <DefEnquanto> <Declaracao>
               | <DefEscreva> <Declaracao>
               | <DefLeia> <Declaracao>
               | <DefChamada> <Declaracao>
               | <DefExpressao> <Declaracao>
               | <DefResultado>
               |

! -------------------------------------------------
! VARIAVEIS
! -------------------------------------------------
<DefVariavel> ::= 'variaveis' '{' <ListaVar> '}'
<ListaVar> ::= <DeclaracaoVar> <ListaVar2>
<ListaVar2> ::= <DeclaracaoVar> <ListaVar2>
                    |
<DeclaracaoVar> ::= <TipoId> <ListaDeclaracaoVar> ';'
<ListaDeclaracaoVar> ::= <AtribuicaoVar> <ListaDeclaracaoVar2>
<ListaDeclaracaoVar2> ::= ',' <AtribuicaoVar> <ListaDeclaracaoVar2>
                        |
<AtribuicaoVar> ::= <Declarador> <AtribuicaoVar2>
<AtribuicaoVar2> ::= '=' <Inicializacao>
                      |
<Inicializacao> ::= <Atribuicao>
                  | '{' <ListaInicializacaoVar> <Inicializacao2>
<Inicializacao2> ::= '}'
        | ',' '}
'package model;

import token.Token;

import java.io.*;
import java.util.ArrayList;


public class AnalisadorSintatico {
    private static ArrayList<String> PrimeiroDefInicio = new ArrayList<>();
    private static ArrayList<String> PrimeiroDefGlobal = new ArrayList<>();
    private static ArrayList<String> PrimeiroDefConstante = new ArrayList<>();
    private static ArrayList<String> PrimeiroDefPrincipal = new ArrayList<>();
    private static ArrayList<String> PrimeiroDefGlobal2 = new ArrayList<>();
    private static ArrayList<String> PrimeiroDefMetodo = new ArrayList<>();
    private static ArrayList<String> PrimeiroConstante = new ArrayList<>();
    private static ArrayList<String> PrimeiroListaConst = new ArrayList<>();
    private static ArrayList<String> PrimeiroTipoId = new ArrayList<>();
    private static ArrayList<Token> listaTokens = new ArrayList<>();
    private static String token;
    private static int tokenAtual = 0, tokenAnterior = 0, numeroArquivo = 0;
    private static ArrayList<ArrayList<Token>> listaListasTokens = new ArrayList<>();

    public void setListaTokens(ArrayList<Token> listaTokens) {
        this.listaTokens = listaTokens;
    }

    public void carregaRegras() {
        PrimeiroDefInicio.add("programa");

        PrimeiroDefGlobal.add("constantes");

        PrimeiroDefConstante.add("constantes");

        PrimeiroDefPrincipal.add("principal");

        PrimeiroDefGlobal2.add("metodo");

        PrimeiroDefMetodo.add("metodo");

        PrimeiroConstante.add("inteiro");
        PrimeiroConstante.add("real");
        PrimeiroConstante.add("texto");
        PrimeiroConstante.add("boleano");

        PrimeiroListaConst.add("inteiro");
        PrimeiroListaConst.add("real");
        PrimeiroListaConst.add("texto");
        PrimeiroListaConst.add("boleano");

        PrimeiroTipoId.add("inteiro");
        PrimeiroTipoId.add("real");
        PrimeiroTipoId.add("texto");
        PrimeiroTipoId.add("boleano");
    }



    public void mainSintatico() {
        File arquivos[], diretorio = new File("teste/");
        arquivos = diretorio.listFiles();

        for (int i = 0; i < listaListasTokens.size(); i++) {
            numeroArquivo = ++i;
            procedimentosGramatica(int lista);
            limpaEstruturas();
        }
    }

    public static void procedimentosGramatica(int lista) {
        proximoToken(lista);
        Inicio();

        if (token.equals("$")) {
            System.out.println("Sucesso na análise sintática do " + numeroArquivo + "º arquivo!");
        } else {
            System.out.println("Erro na análise sintática do " + numeroArquivo + "º arquivo!");
        }
    }

    public static void proximoToken(int lista) {
        token = listaListasTokens.get(lista).get(tokenAtual).getLexema();
        System.out.println(tokenAtual);
        System.out.println(token);
        tokenAnterior = tokenAtual;
        tokenAtual++;
    }

    public static void Inicio() {

        if (token.equals("programa")) {
            proximoToken(lista);

            if (token.equals("{")) {
                proximoToken(lista);
                DefGlobal();

                if (token.equals("}")) {
                    proximoToken(lista);
                }
            }
        } else {
            System.out.println("Erro no início do programa.");
        }
    }

    public static void DefGlobal() {

        if (PrimeiroDefConstante.contains(token)) {
            DefConstante();
            DefPrincipal();
            DefGlobal2();
        }
    }

    public static void DefGlobal2() {

        if (PrimeiroDefMetodo.contains(token)) {
            DefMetodo();
            DefGlobal2();
        }
    }

    public static void DefConstante() {

        if (token.equals("constantes")) {
            proximoToken(lista);

            if (token.equals("{")) {
                proximoToken(lista);
                ListaConst();

                if (token.equals("}")) {
                    proximoToken(lista);
                }
            }
        }
    }

    public static void DefPrincipal() {

        if (token.equals("metodo")) {
            proximoToken(lista);

            if (token.equals("principal")) {
                proximoToken(lista);

                if (token.equals("(")) {
                    proximoToken(lista);

                    if (token.equals(")")) {
                        proximoToken(lista);

                        if (token.equals(":")) {
                            proximoToken(lista);
                            Tipo();

                            if (token.equals("{")) {
                                proximoToken(lista);
                                Declaracao();

                                if (token.equals("}")) {
                                    proximoToken(lista);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public static void DefMetodo() {

        if (token.equals("metodo")) {
            proximoToken(lista);

            if (listaTokens.get(tokenAnterior).getClasse().equals("IDENTIFICADOR")) {
                proximoToken(lista);

                if (token.equals("(")) {
                    proximoToken(lista);

                    ListaParam();

                    if (token.equals(")")) {
                        proximoToken(lista);

                        if (token.equals(":")) {
                            proximoToken(lista);
                            Tipo();

                            if (token.equals("{")) {
                                proximoToken(lista);
                                Declaracao();

                                if (token.equals("}")) {
                                    proximoToken(lista);
                                }
                            }
                        }
                    }
                }
            }
        }

    }

    public static void ListaConst() {

        if (PrimeiroConstante.contains(token)) {
            Constante();

            if (token.equals(";")) {
                proximoToken(lista);
                ListaConst2();
            }
        }
    }

    public static void ListaConst2() {

        if (PrimeiroListaConst.contains(token)) {
            ListaConst();
        }
    }

    public static void Constante() {

        if (PrimeiroTipoId.contains(token)) {
            TipoId();
            AtribuicaoConst();
            ListaAtribuicaoConst();
        }
    }

    public static void ListaAtribuicaoConst() {

        if (token.equals(",")) {
            proximoToken(lista);
            AtribuicaoConst();
        }
    }

    public static void AtribuicaoConst() {

        if (listaTokens.get(tokenAnterior).getClasse().equals("IDENTIFICADOR")) {
            proximoToken(lista);

            if (token.equals("=")) {
                proximoToken(lista);
                Valor();
            }
        }
    }

    public static void Tipo() {

        if ((token.equals("vazio"))) {
            proximoToken(lista);
        } else {
            TipoId();
        }
    }

    public static void TipoId() {

        if ((token.equals("inteiro")) || (token.equals("real")) || (token.equals("texto")) || (token.equals("boleano"))) {
            proximoToken(lista);
        }
    }

    public static void Valor() {

        if ((listaTokens.get(tokenAnterior).getClasse().equals("NUMERO")) || (listaTokens.get(tokenAnterior).getClasse().equals("CADEIA_CARACTERES"))) {
            proximoToken(lista);
        } else if (listaTokens.get(tokenAnterior).getClasse().equals("IDENTIFICADOR")) {
            proximoToken(lista);
        }
    }


    public static void ListaParam() {
        TipoId();
        if (listaTokens.get(tokenAnterior).getClasse().equals("IDENTIFICADOR")) {
            proximoToken(lista);
            ListaParam2();
        }
    }

    //CORRIGIR
    public static void ListaParam2() {

        //CORRIGIR ESSE '*' ABAIXO, COLOQUEI ELE AÍ ENQUANTO RESOLVIA O PROBLEMA DAS VÍRGULAS NOS TOKENS
        //CORRIGIR ESSE '*' ABAIXO, COLOQUEI ELE AÍ ENQUANTO RESOLVIA O PROBLEMA DAS VÍRGULAS NOS TOKENS
        //CORRIGIR ESSE '*' ABAIXO, COLOQUEI ELE AÍ ENQUANTO RESOLVIA O PROBLEMA DAS VÍRGULAS NOS TOKENS
        //CORRIGIR ESSE '*' ABAIXO, COLOQUEI ELE AÍ ENQUANTO RESOLVIA O PROBLEMA DAS VÍRGULAS NOS TOKENS
        //CORRIGIR ESSE '*' ABAIXO, COLOQUEI ELE AÍ ENQUANTO RESOLVIA O PROBLEMA DAS VÍRGULAS NOS TOKENS
        //CORRIGIR ESSE '*' ABAIXO, COLOQUEI ELE AÍ ENQUANTO RESOLVIA O PROBLEMA DAS VÍRGULAS NOS TOKENS
        //CORRIGIR ESSE '*' ABAIXO, COLOQUEI ELE AÍ ENQUANTO RESOLVIA O PROBLEMA DAS VÍRGULAS NOS TOKENS
        //CORRIGIR ESSE '*' ABAIXO, COLOQUEI ELE AÍ ENQUANTO RESOLVIA O PROBLEMA DAS VÍRGULAS NOS TOKENS
        //CORRIGIR ESSE '*' ABAIXO, COLOQUEI ELE AÍ ENQUANTO RESOLVIA O PROBLEMA DAS VÍRGULAS NOS TOKENS

        if (token.equals("*")) {
            proximoToken(lista);
            TipoId();

            if (listaTokens.get(tokenAnterior).getClasse().equals("IDENTIFICADOR")) {
                proximoToken(lista);
                ListaParam2();
            }
        }
    }



    public static void Declaracao() {
        DefVariavel();
    }

    public static void DefVariavel() {

        if (token.equals("variaveis")) {
            proximoToken(lista);

            if (token.equals("{")) {
                proximoToken(lista);
                //Lista...

                if (token.equals("}")) {
                    proximoToken(lista);
                }
            }
        }
    }

    public static void limpaEstruturas() {
        listaTokens.clear();
        tokenAnterior = 0;
        tokenAtual = 0;
    }
}<ListaInicializacaoVar> ::= <Inicializacao> <ListaInicializacaoVar2>
<ListaInicializacaoVar2> ::= ',' <Inicializacao> <ListaInicializacaoVar2>
                           |
<Declarador> ::= IDENTIFICADOR <Declarador2>
<Declarador2> ::= '[' <Declarador3>
                |
<Declarador3> ::= <ExprAtribuicao> ']' <Declarador2>
                | ']' <Declarador2>

! -------------------------------------------------
! ESTRUTURAS DE CONTROLE
! -------------------------------------------------
<DefSe> ::= 'se' '(' <ExprRelacionalIgual> ')' 'entao' '{' <Declaracao> '}' <DefSenao> 

<DefSenao> ::= 'senao' '{' <Declaracao> '}'
             |

<DefEnquanto> ::= 'enquanto' '(' <ExprRelacionalIgual> ')' '{' <Declaracao> '}'

! -------------------------------------------------
! COMANDOS
! -------------------------------------------------
<DefEscreva>  ::= 'escreva' '(' <ListaArg> ')' ';'


<DefLeia>  ::= 'leia' '(' <ListaArg> ')' ';'
            
<DefChamada> ::= IDENTIFICADOR '(' <DefChamada2>
<DefChamada2> ::= <ListaArg> ')' ';'
                  | ')' ';'

<DefResultado> ::= 'resultado' <Expressao> ';'

! -------------------------------------------------
! EXPRESSOES
! -------------------------------------------------                 
<DefExpressao> ::= ';'
             	 | <Expressao> ';'

<Expressao> ::= <Atribuicao> <Expressao2>
<Expressao2> ::= ',' <Atribuicao> <Expressao2>
               |

<Atribuicao> ::= <ExprAtribuicao> <Atribuicao2>
<Atribuicao2> ::= '=' <ExprAtribuicao> <Atribuicao2>
                |
<ExprAtribuicao> ::= <ExprLogicaOu>
<ExprLogicaOu> ::= <ExprLogicaE> <ExprLogicaOu2>
<ExprLogicaOu2> ::= '||' <ExprLogicaE> <ExprLogicaOu2>
                  |
<ExprLogicaE> ::= <ExprRelacionalIgual> <ExprLogicaE2>
<ExprLogicaE2> ::= '&&' <ExprRelacionalIgual> <ExprLogicaE2>
                 |
<ExprRelacionalIgual> ::= <ExprRelacionalOutras> <ExprRelacionalIgual2>
<ExprRelacionalIgual2> ::= <OpRelacionalIgual> <ExprRelacionalOutras> <ExprRelacionalIgual2>
                         |
<ExprRelacionalOutras> ::= <ExprAritmeticaAd> <ExprRelacionalOutras2>
<ExprRelacionalOutras2> ::= <OpRelacionalOutros> <ExprAritmeticaAd> <ExprRelacionalOutras2>
                          |
<ExprAritmeticaAd> ::= <ExprAritmeticaMult> <ExprAritmeticaAd2>
<ExprAritmeticaAd2> ::= <OpAritmeticoAd> <ExprAritmeticaMult> <ExprAritmeticaAd2>
                      |
<ExprAritmeticaMult> ::= <ExprUnaria> <ExprAritmeticaMult2>
<ExprAritmeticaMult2> ::= <OpAritmeticoMult> <ExprUnaria> <ExprAritmeticaMult2>
                        |
<ExprUnaria> ::= <OpUnario> <ExprUnaria>
              | <ExprPosfixa>
<ExprPosfixa> ::= <Fator> <ExprPosfixa2>
<ExprPosfixa2> ::= <OpPosfixo> <ExprPosfixa2>
                 |

<OpRelacionalIgual> ::= '==' | '!='

<OpRelacionalOutros> ::= '<' | '>' | '<=' | '>='

<OpAritmeticoAd> ::= '+' | '-'

<OpAritmeticoMult> ::= '*' | '/'

<OpUnario> ::= '++' | '--' | '!'

<OpPosfixo> ::= '++' | '--' | '[' <Expressao> ']' | '(' <OpPosfixo2> | '.' IDENTIFICADOR
<OpPosfixo2> ::= ')'
               | <ListaArg> ')'

<Fator> ::= IDENTIFICADOR
          | NUMERO
          | CADEIA_CARACTERES
          | 'verdadeiro'
          | 'falso'
          | '(' <Expressao> ')'